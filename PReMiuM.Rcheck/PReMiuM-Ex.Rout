
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PReMiuM"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PReMiuM')
Loading required package: Rcpp
Loading required package: cluster
Loading required package: ggplot2
Loading required package: grid
Loading required package: clue
> 
> assign(".oldSearch", search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PReMiuM-package")
> ### * PReMiuM-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PReMiuM-package
> ### Title: Dirichlet Process Bayesian Clustering
> ### Aliases: PReMiuM-package PReMiuM
> 
> ### ** Examples
> 
> 
> # example for Poisson outcome and Discrete covariates
> inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=10, nClusInit=20,
+     nBurn=20, data=inputs$inputData, output="output", 
+     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
+     fixedEffectsNames = inputs$fixedEffectNames)
Random number seed: 1358933198
Sweep: 1
> 
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 31 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
Trying 16 clusters
Trying 17 clusters
Trying 18 clusters
Trying 19 clusters
Trying 20 clusters
Trying 21 clusters
Trying 22 clusters
Trying 23 clusters
Trying 24 clusters
Trying 25 clusters
Trying 26 clusters
Trying 27 clusters
Trying 28 clusters
Trying 29 clusters
Trying 30 clusters
Trying 31 clusters
> riskProfileObj<-calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  10 
> clusterOrderObj<-plotRiskProfile(riskProfileObj,"summary.png")
> 
> 
> 
> 
> cleanEx()
> nameEx("calcAvgRiskAndProfile")
> ### * calcAvgRiskAndProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcAvgRiskAndProfile
> ### Title: Calculation of the average risks and profiles
> ### Aliases: calcAvgRiskAndProfile
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> 
> generateDataList <- clusSummaryBernoulliDiscrete()
> inputs <- generateSampleDataFile(generateDataList)
> runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, nSweeps=10, 
+     nBurn=20, data=inputs$inputData, output="output", nClusInit=15,
+     covNames=inputs$covNames)
Random number seed: 1358933233
Sweep: 1
> 
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 25 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
Trying 16 clusters
Trying 17 clusters
Trying 18 clusters
Trying 19 clusters
Trying 20 clusters
Trying 21 clusters
Trying 22 clusters
Trying 23 clusters
Trying 24 clusters
Trying 25 clusters
> riskProfileObj<-calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  10 
> 
> 
> 
> cleanEx()
> nameEx("calcDissimilarityMatrix")
> ### * calcDissimilarityMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcDissimilarityMatrix
> ### Title: Calculates the dissimilarity matrix
> ### Aliases: calcDissimilarityMatrix
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> generateDataList <- clusSummaryBernoulliDiscrete()
> inputs <- generateSampleDataFile(generateDataList)
> runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
+     nSweeps=10, nBurn=20, data=inputs$inputData, output="output", 
+     covNames=inputs$covNames,nClusInit=15)
Random number seed: 1358933245
Sweep: 1
> 
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> 
> 
> 
> 
> cleanEx()
> nameEx("calcOptimalClustering")
> ### * calcOptimalClustering
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcOptimalClustering
> ### Title: Calculation of the optimal clustering
> ### Aliases: calcOptimalClustering
> ### Keywords: postprocessing
> 
> ### ** Examples
> 
> generateDataList <- clusSummaryBernoulliDiscrete()
> inputs <- generateSampleDataFile(generateDataList)
> runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
+     nSweeps=10, nBurn=20, data=inputs$inputData, output="output", 
+     covNames=inputs$covNames, nClusInit=15)
Random number seed: 1358933245
Sweep: 1
> 
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 32 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
Trying 16 clusters
Trying 17 clusters
Trying 18 clusters
Trying 19 clusters
Trying 20 clusters
Trying 21 clusters
Trying 22 clusters
Trying 23 clusters
Trying 24 clusters
Trying 25 clusters
Trying 26 clusters
Trying 27 clusters
Trying 28 clusters
Trying 29 clusters
Trying 30 clusters
Trying 31 clusters
Trying 32 clusters
> 
> 
> 
> 
> cleanEx()
> nameEx("calcPredictions")
> ### * calcPredictions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcPredictions
> ### Title: Calculates the predictions
> ### Aliases: calcPredictions
> ### Keywords: predictions
> 
> ### ** Examples
> 
> inputs <- generateSampleDataFile(clusSummaryBernoulliDiscrete())
>      
> # prediction profiles
> preds<-data.frame(matrix(c(0, 0, 1, 0, 0,
+ 0, 0, 1, NA, 0),ncol=5,byrow=TRUE))
> colnames(preds)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
>      
> # run profile regression
> runInfoObj<-profRegr(yModel=inputs$yModel, xModel=inputs$xModel, 
+     nSweeps=100, nBurn=1000, data=inputs$inputData, output="output", 
+     covNames=inputs$covNames,predict=preds)
Random number seed: 1358933276
Sweep: 1
Sweep: 500
Sweep: 1000
>      
> # postprocessing
> dissimObj <- calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 100
Stage 2:1 samples out of 100
> clusObj <- calcOptimalClustering(dissimObj)
Max no of possible clusters: 18 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
Trying 16 clusters
Trying 17 clusters
Trying 18 clusters
> riskProfileObj <- calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  100 
> clusterOrderObj <- plotRiskProfile(riskProfileObj,"summary.png",
+     whichCovariates=c(1,2))
> output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
Processing sweep 1 of  100 
> 
> # example where the fixed effects can be provided for prediction 
> # but the observed response is missing 
> # (there are 2 fixed effects in this example). 
> # in this example we also use the Rao Blackwellised predictions
> 
> inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> 
> # prediction profiles
> predsPoisson<- data.frame(matrix(c(7, 2.27, -0.66, 1.07, 9, 
+      -0.01, -0.18, 0.91, 12, -0.09, -1.76, 1.04, 16, 1.55, 1.20, 0.89,
+      10, -1.35, 0.79, 0.95),ncol=5,byrow=TRUE))
> colnames(predsPoisson)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> 
> # run profile regression
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+          xModel=inputs$xModel, nSweeps=100, 
+          nBurn=100, data=inputs$inputData, output="output", 
+          covNames = inputs$covNames, outcomeT="outcomeT",
+          fixedEffectsNames = inputs$fixedEffectNames,predict=predsPoisson)
Random number seed: 1358933292
Sweep: 1
> 
> # postprocessing
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 100
Stage 2:1 samples out of 100
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 14 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
> riskProfileObj<-calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  100 
> output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
Log odds ratio does not make sense for Poisson or Normal response
Processing sweep 1 of  100 
> 
> 
> # example where both the observed response and fixed effects are present 
> #(there are no fixed effects in this example, but 
> # these would just be added as columns between the first and last columns). 
> 
> inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> 
> # prediction profiles
> predsPoisson<- data.frame(matrix(c(NA, 2.27, -0.66, 1.07, NA, 
+      -0.01, -0.18, 0.91, NA, -0.09, -1.76, 1.04, NA, 1.55, 1.20, 0.89,
+      NA, -1.35, 0.79, 0.95),ncol=5,byrow=TRUE))
> colnames(predsPoisson)<-names(inputs$inputData)[2:(inputs$nCovariates+1)]
> 
> # run profile regression
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+          xModel=inputs$xModel, nSweeps=10, 
+          nBurn=20, data=inputs$inputData, output="output", 
+          covNames = inputs$covNames, outcomeT="outcomeT",
+          fixedEffectsNames = inputs$fixedEffectNames,
+          nClusInit=15, predict=predsPoisson)
Random number seed: 1358933307
Sweep: 1
> 
> # postprocessing
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 15 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
> riskProfileObj<-calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  10 
> output_predictions <- calcPredictions(riskProfileObj,fullSweepPredictions=TRUE)
Log odds ratio does not make sense for Poisson or Normal response
Processing sweep 1 of  10 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("clusSummaryBernoulliDiscrete")
> ### * clusSummaryBernoulliDiscrete
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusSummaryBernoulliDiscrete
> ### Title: Sample datasets for profile regression
> ### Aliases: clusSummaryBernoulliDiscrete clusSummaryBinomialNormal
> ###   clusSummaryCategoricalDiscrete clusSummaryNormalDiscrete
> ###   clusSummaryNormalNormal clusSummaryPoissonDiscrete
> ###   clusSummaryPoissonNormal clusSummaryVarSelectBernoulliDiscrete
> ###   clusSummaryBernoulliMixed
> ### Keywords: simulation
> 
> ### ** Examples
> 
> 
> clusSummaryBernoulliDiscrete()
$outcomeType
[1] "Bernoulli"

$covariateType
[1] "Discrete"

$nCovariates
[1] 5

$nCategories
[1] 3 3 3 3 3

$nFixedEffects
[1] 2

$fixedEffectsCoeffs
[1]  0.1 -0.5

$missingDataProb
[1] 0

$nClusters
[1] 5

$clusterSizes
[1] 200 200 200 200 200

$clusterData
$clusterData[[1]]
$clusterData[[1]]$theta
[1] 2.197225

$clusterData[[1]]$covariateProbs
$clusterData[[1]]$covariateProbs[[1]]
[1] 0.8 0.1 0.1

$clusterData[[1]]$covariateProbs[[2]]
[1] 0.8 0.1 0.1

$clusterData[[1]]$covariateProbs[[3]]
[1] 0.8 0.1 0.1

$clusterData[[1]]$covariateProbs[[4]]
[1] 0.8 0.1 0.1

$clusterData[[1]]$covariateProbs[[5]]
[1] 0.8 0.1 0.1



$clusterData[[2]]
$clusterData[[2]]$theta
[1] 0.6931472

$clusterData[[2]]$covariateProbs
$clusterData[[2]]$covariateProbs[[1]]
[1] 0.8 0.1 0.1

$clusterData[[2]]$covariateProbs[[2]]
[1] 0.8 0.1 0.1

$clusterData[[2]]$covariateProbs[[3]]
[1] 0.1 0.8 0.1

$clusterData[[2]]$covariateProbs[[4]]
[1] 0.1 0.8 0.1

$clusterData[[2]]$covariateProbs[[5]]
[1] 0.1 0.1 0.8



$clusterData[[3]]
$clusterData[[3]]$theta
[1] 0

$clusterData[[3]]$covariateProbs
$clusterData[[3]]$covariateProbs[[1]]
[1] 0.1 0.8 0.1

$clusterData[[3]]$covariateProbs[[2]]
[1] 0.1 0.8 0.1

$clusterData[[3]]$covariateProbs[[3]]
[1] 0.1 0.8 0.1

$clusterData[[3]]$covariateProbs[[4]]
[1] 0.1 0.8 0.1

$clusterData[[3]]$covariateProbs[[5]]
[1] 0.1 0.8 0.1



$clusterData[[4]]
$clusterData[[4]]$theta
[1] -0.6931472

$clusterData[[4]]$covariateProbs
$clusterData[[4]]$covariateProbs[[1]]
[1] 0.1 0.1 0.8

$clusterData[[4]]$covariateProbs[[2]]
[1] 0.1 0.8 0.1

$clusterData[[4]]$covariateProbs[[3]]
[1] 0.8 0.1 0.1

$clusterData[[4]]$covariateProbs[[4]]
[1] 0.1 0.1 0.8

$clusterData[[4]]$covariateProbs[[5]]
[1] 0.8 0.1 0.1



$clusterData[[5]]
$clusterData[[5]]$theta
[1] -2.197225

$clusterData[[5]]$covariateProbs
$clusterData[[5]]$covariateProbs[[1]]
[1] 0.1 0.1 0.8

$clusterData[[5]]$covariateProbs[[2]]
[1] 0.1 0.1 0.8

$clusterData[[5]]$covariateProbs[[3]]
[1] 0.1 0.1 0.8

$clusterData[[5]]$covariateProbs[[4]]
[1] 0.1 0.1 0.8

$clusterData[[5]]$covariateProbs[[5]]
[1] 0.1 0.1 0.8




> 
> 
> 
> 
> cleanEx()
> nameEx("generateSampleDataFile")
> ### * generateSampleDataFile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateSampleDataFile
> ### Title: Generate sample data files for profile regression
> ### Aliases: generateSampleDataFile
> ### Keywords: simulation
> 
> ### ** Examples
> 
> # generation of data for clustering
> 
> generateDataList <- clusSummaryBernoulliDiscrete()
> inputs <- generateSampleDataFile(generateDataList)
> 
> 
> 
> 
> cleanEx()
> nameEx("is.wholenumber")
> ### * is.wholenumber
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is.wholenumber
> ### Title: Function to check if a number is a whole number
> ### Aliases: is.wholenumber
> 
> ### ** Examples
> 
> is.wholenumber(4) # TRUE
[1] TRUE
> is.wholenumber(3.4) # FALSE
[1] FALSE
> 
> 
> 
> cleanEx()
> nameEx("margModelPosterior")
> ### * margModelPosterior
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: margModelPosterior
> ### Title: Marginal Model Posterior
> ### Aliases: margModelPosterior
> ### Keywords: margModelPosterior
> 
> ### ** Examples
> 
> inputs <- generateSampleDataFile(clusSummaryBernoulliDiscrete())
> 
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+          xModel=inputs$xModel, nSweeps=5, 
+          nBurn=10, data=inputs$inputData, output="output", 
+          covNames = inputs$covNames, nClusInit=15,
+          fixedEffectsNames = inputs$fixedEffectNames)
Random number seed: 1358933321
Sweep: 1
> 
> margModelPosterior(runInfoObj)
[1] -3989.759
> 
> 
> 
> 
> cleanEx()
> nameEx("plotRiskProfile")
> ### * plotRiskProfile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotRiskProfile
> ### Title: Plot the Risk Profiles
> ### Aliases: plotRiskProfile
> ### Keywords: plots postprocessing
> 
> ### ** Examples
> 
> # example for Poisson outcome and Discrete covariates
> inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=10, nClusInit=15,
+     nBurn=20, data=inputs$inputData, output="output", 
+     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
+     fixedEffectsNames = inputs$fixedEffectNames)
Random number seed: 1358933323
Sweep: 1
> 
> dissimObj<-calcDissimilarityMatrix(runInfoObj)
Stage 1:1 samples out of 10
Stage 2:1 samples out of 10
> clusObj<-calcOptimalClustering(dissimObj)
Max no of possible clusters: 26 
Trying 2 clusters
Trying 3 clusters
Trying 4 clusters
Trying 5 clusters
Trying 6 clusters
Trying 7 clusters
Trying 8 clusters
Trying 9 clusters
Trying 10 clusters
Trying 11 clusters
Trying 12 clusters
Trying 13 clusters
Trying 14 clusters
Trying 15 clusters
Trying 16 clusters
Trying 17 clusters
Trying 18 clusters
Trying 19 clusters
Trying 20 clusters
Trying 21 clusters
Trying 22 clusters
Trying 23 clusters
Trying 24 clusters
Trying 25 clusters
Trying 26 clusters
> riskProfileObj<-calcAvgRiskAndProfile(clusObj)
Processing sweep 1 of  10 
> clusterOrderObj<-plotRiskProfile(riskProfileObj,"summary.png")
> 
> 
> 
> cleanEx()
> nameEx("profRegr")
> ### * profRegr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profRegr
> ### Title: Profile Regression
> ### Aliases: profRegr
> ### Keywords: profileRegression
> 
> ### ** Examples
> 
> # example for Poisson outcome and Discrete covariates
> inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=10, nClusInit=20,
+     nBurn=20, data=inputs$inputData, output="output", 
+     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
+     fixedEffectsNames = inputs$fixedEffectNames)
Random number seed: 1358933350
Sweep: 1
> 
> 
> # example with Bernoulli outcome and Mixed covariates
> inputs <- generateSampleDataFile(clusSummaryBernoulliMixed())
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=10, nClusInit=15,
+     nBurn=20, data=inputs$inputData, output="output", 
+     discreteCovs = inputs$discreteCovs,
+     continuousCovs = inputs$continuousCovs)
Random number seed: 1358933351
Sweep: 1
> 
> 
> 
> 
> cleanEx()
> nameEx("setHyperparams")
> ### * setHyperparams
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: setHyperparams
> ### Title: Definition of characteristics of sample datasets for profile
> ###   regression
> ### Aliases: setHyperparams
> ### Keywords: hyperparameters
> 
> ### ** Examples
> 
> 
> hyp <- setHyperparams(shapeAlpha=3,rateAlpha=2,mu0=c(30,13),R0=3.2*diag(2))
> 
> inputs <- generateSampleDataFile(clusSummaryPoissonNormal())
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=2, nClusInit=15,
+     nBurn=2, data=inputs$inputData, output="output", 
+     covNames = inputs$covNames, outcomeT = inputs$outcomeT,
+     fixedEffectsNames = inputs$fixedEffectNames,
+     hyper=hyp)
Random number seed: 1358933351
Sweep: 1
> 
> 
> 
> 
> cleanEx()
> nameEx("summariseVarSelectRho")
> ### * summariseVarSelectRho
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summariseVarSelectRho
> ### Title: summariseVarSelectRho
> ### Aliases: summariseVarSelectRho
> ### Keywords: variableSelection
> 
> ### ** Examples
> 
> 
> inputs <- generateSampleDataFile(clusSummaryVarSelectBernoulliDiscrete())
> 
> runInfoObj<-profRegr(yModel=inputs$yModel, 
+     xModel=inputs$xModel, nSweeps=10, nClusInit=15, 
+     nBurn=20, data=inputs$inputData, output="output", 
+     covNames = inputs$covNames, varSelect="Continuous")
Random number seed: 1358933351
Sweep: 1
> 
> rho<-summariseVarSelectRho(runInfoObj)
> 
> 
> 
> ### * <FOOTER>
> ###
> cat("Time elapsed: ", proc.time() - get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  152.529 1.08 154.243 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
